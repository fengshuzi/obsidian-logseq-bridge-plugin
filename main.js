/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AddDurationPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var fs = __toESM(require("fs"));
var AddDurationPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.addDurationToCurrentFile = async () => {
      const activeLeaf = this.app.workspace.activeLeaf;
      if (!activeLeaf || !activeLeaf.view)
        return;
      const file = activeLeaf.view.file;
      if (!file)
        return;
      const filePath = this.app.vault.adapter.getFullPath(file.path);
      console.log(filePath);
      addDurationToFiles(filePath);
    };
  }
  async onload() {
    console.log("clean logseq timetracking  loaded.");
    this.addCommand({
      id: "clean logseq timetracking",
      name: "clean logseq timetracking ",
      callback: this.addDurationToCurrentFile
    });
  }
};
function addDurationToFiles(filePath) {
  const lines = fs.readFileSync(filePath, "utf8").split("\n");
  const updatedLines = addDuration(lines);
  fs.writeFileSync(filePath, updatedLines.join("\n"));
  console.log(`Updated file: ${filePath}`);
}
function addDuration(lines) {
  const updatedLines = [];
  let i = 0;
  while (i < lines.length) {
    const line = lines[i];
    if (line.includes("- DONE") && i + 1 < lines.length && !lines[i + 1].trim().startsWith("-")) {
      const taskDescription = line.match(/- DONE (.+)/)[1];
      let taskLogs = "";
      let j = i + 1;
      while (j < lines.length && !lines[j].trim().startsWith("-")) {
        taskLogs += lines[j] + "\n";
        j++;
      }
      const durationPattern = /CLOCK: .+? =>  (\d{2}:\d{2}:\d{2})/g;
      const durations = [];
      let match;
      while (match = durationPattern.exec(taskLogs)) {
        durations.push(match[1]);
      }
      const totalDuration = durations.reduce((acc, duration) => acc + timeToSeconds(duration), 0);
      const formattedDuration = formatDuration(totalDuration);
      const updatedLine = line.replace(`- DONE ${taskDescription}`, `- ${taskDescription}${formattedDuration}`);
      updatedLines.push(updatedLine);
      i = j - 1;
    } else {
      updatedLines.push(line);
    }
    i++;
  }
  return updatedLines;
}
function timeToSeconds(timeStr) {
  const [hours, minutes, seconds] = timeStr.split(":").map(Number);
  const totalSeconds = hours * 3600 + minutes * 60 + seconds;
  return totalSeconds;
}
function formatDuration(seconds) {
  if (seconds < 60) {
    return `  ${seconds}s`;
  } else if (seconds < 3600) {
    const minutes = Math.floor(seconds / 60);
    return `  ${minutes}m`;
  } else {
    const hours = Math.floor(seconds / 3600);
    return ` ${hours}h`;
  }
}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBZGREdXJhdGlvblBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gIGFzeW5jIG9ubG9hZCgpIHtcbiAgICBjb25zb2xlLmxvZygnY2xlYW4gbG9nc2VxIHRpbWV0cmFja2luZyAgbG9hZGVkLicpO1xuXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgIGlkOiAnY2xlYW4gbG9nc2VxIHRpbWV0cmFja2luZycsXG4gICAgICBuYW1lOiAnY2xlYW4gbG9nc2VxIHRpbWV0cmFja2luZyAnLFxuICAgICAgY2FsbGJhY2s6IHRoaXMuYWRkRHVyYXRpb25Ub0N1cnJlbnRGaWxlLFxuICAgIH0pO1xuICB9XG5cbiAgYWRkRHVyYXRpb25Ub0N1cnJlbnRGaWxlID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGFjdGl2ZUxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZjtcbiAgICBpZiAoIWFjdGl2ZUxlYWYgfHwgIWFjdGl2ZUxlYWYudmlldykgcmV0dXJuO1xuXG4gICAgY29uc3QgZmlsZSA9IGFjdGl2ZUxlYWYudmlldy5maWxlO1xuICAgIGlmICghZmlsZSkgcmV0dXJuO1xuXG4gICAgY29uc3QgZmlsZVBhdGggPSB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLmdldEZ1bGxQYXRoKGZpbGUucGF0aCk7XG5cbiAgICBjb25zb2xlLmxvZyhmaWxlUGF0aClcbiAgICBhZGREdXJhdGlvblRvRmlsZXMoZmlsZVBhdGgpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhZGREdXJhdGlvblRvRmlsZXMoZmlsZVBhdGg6IHN0cmluZykge1xuICBjb25zdCBsaW5lcyA9IGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCwgJ3V0ZjgnKS5zcGxpdCgnXFxuJyk7XG4gIGNvbnN0IHVwZGF0ZWRMaW5lcyA9IGFkZER1cmF0aW9uKGxpbmVzKTtcbiAgZnMud3JpdGVGaWxlU3luYyhmaWxlUGF0aCwgdXBkYXRlZExpbmVzLmpvaW4oJ1xcbicpKTtcbiAgY29uc29sZS5sb2coYFVwZGF0ZWQgZmlsZTogJHtmaWxlUGF0aH1gKTtcbn1cblxuZnVuY3Rpb24gYWRkRHVyYXRpb24obGluZXM6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xuICBjb25zdCB1cGRhdGVkTGluZXM6IHN0cmluZ1tdID0gW107XG4gIGxldCBpID0gMDtcbiAgd2hpbGUgKGkgPCBsaW5lcy5sZW5ndGgpIHtcbiAgICBjb25zdCBsaW5lID0gbGluZXNbaV07XG4gICAgaWYgKGxpbmUuaW5jbHVkZXMoJy0gRE9ORScpICYmIGkgKyAxIDwgbGluZXMubGVuZ3RoICYmICFsaW5lc1tpICsgMV0udHJpbSgpLnN0YXJ0c1dpdGgoJy0nKSkge1xuICAgICAgY29uc3QgdGFza0Rlc2NyaXB0aW9uID0gbGluZS5tYXRjaCgvLSBET05FICguKykvKVsxXTtcbiAgICAgIGxldCB0YXNrTG9ncyA9ICcnO1xuICAgICAgbGV0IGogPSBpICsgMTtcbiAgICAgIHdoaWxlIChqIDwgbGluZXMubGVuZ3RoICYmICFsaW5lc1tqXS50cmltKCkuc3RhcnRzV2l0aCgnLScpKSB7XG4gICAgICAgIHRhc2tMb2dzICs9IGxpbmVzW2pdICsgJ1xcbic7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICAgIGNvbnN0IGR1cmF0aW9uUGF0dGVybiA9IC9DTE9DSzogLis/ID0+ICAoXFxkezJ9OlxcZHsyfTpcXGR7Mn0pL2c7XG4gICAgICBjb25zdCBkdXJhdGlvbnM6IHN0cmluZ1tdID0gW107XG4gICAgICBsZXQgbWF0Y2g7XG4gICAgICB3aGlsZSAoKG1hdGNoID0gZHVyYXRpb25QYXR0ZXJuLmV4ZWModGFza0xvZ3MpKSkge1xuICAgICAgICBkdXJhdGlvbnMucHVzaChtYXRjaFsxXSk7XG4gICAgICB9XG4gICAgICBjb25zdCB0b3RhbER1cmF0aW9uID0gZHVyYXRpb25zLnJlZHVjZSgoYWNjLCBkdXJhdGlvbikgPT4gYWNjICsgdGltZVRvU2Vjb25kcyhkdXJhdGlvbiksIDApO1xuICAgICAgY29uc3QgZm9ybWF0dGVkRHVyYXRpb24gPSBmb3JtYXREdXJhdGlvbih0b3RhbER1cmF0aW9uKTtcbiAgICAgIGNvbnN0IHVwZGF0ZWRMaW5lID0gbGluZS5yZXBsYWNlKGAtIERPTkUgJHt0YXNrRGVzY3JpcHRpb259YCwgYC0gJHt0YXNrRGVzY3JpcHRpb259JHtmb3JtYXR0ZWREdXJhdGlvbn1gKTtcbiAgICAgIHVwZGF0ZWRMaW5lcy5wdXNoKHVwZGF0ZWRMaW5lKTtcbiAgICAgIGkgPSBqIC0gMTsgLy8gU2tpcCB0aGUgbGluZXMgdW50aWwgdGhlIGxhc3QgbGluZSBvZiB0aGUgdGFzayBsb2dzXG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZWRMaW5lcy5wdXNoKGxpbmUpO1xuICAgIH1cbiAgICBpKys7XG4gIH1cbiAgcmV0dXJuIHVwZGF0ZWRMaW5lcztcbn1cblxuZnVuY3Rpb24gdGltZVRvU2Vjb25kcyh0aW1lU3RyOiBzdHJpbmcpOiBudW1iZXIge1xuICBjb25zdCBbaG91cnMsIG1pbnV0ZXMsIHNlY29uZHNdID0gdGltZVN0ci5zcGxpdCgnOicpLm1hcChOdW1iZXIpO1xuICBjb25zdCB0b3RhbFNlY29uZHMgPSBob3VycyAqIDM2MDAgKyBtaW51dGVzICogNjAgKyBzZWNvbmRzO1xuICByZXR1cm4gdG90YWxTZWNvbmRzO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREdXJhdGlvbihzZWNvbmRzOiBudW1iZXIpOiBzdHJpbmcge1xuICBpZiAoc2Vjb25kcyA8IDYwKSB7XG4gICAgcmV0dXJuIGAgICR7c2Vjb25kc31zYDtcbiAgfSBlbHNlIGlmIChzZWNvbmRzIDwgMzYwMCkge1xuICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgcmV0dXJuIGAgICR7bWludXRlc31tYDtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBob3VycyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDM2MDApO1xuICAgIHJldHVybiBgICR7aG91cnN9aGA7XG4gIH1cbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUF1QjtBQUN2QixTQUFvQjtBQUVwQixJQUFxQixvQkFBckIsY0FBK0MsdUJBQU87QUFBQSxFQUF0RDtBQUFBO0FBV0Usb0NBQTJCLFlBQVk7QUFDckMsWUFBTSxhQUFhLEtBQUssSUFBSSxVQUFVO0FBQ3RDLFVBQUksQ0FBQyxjQUFjLENBQUMsV0FBVztBQUFNO0FBRXJDLFlBQU0sT0FBTyxXQUFXLEtBQUs7QUFDN0IsVUFBSSxDQUFDO0FBQU07QUFFWCxZQUFNLFdBQVcsS0FBSyxJQUFJLE1BQU0sUUFBUSxZQUFZLEtBQUssSUFBSTtBQUU3RCxjQUFRLElBQUksUUFBUTtBQUNwQix5QkFBbUIsUUFBUTtBQUFBLElBQzdCO0FBQUE7QUFBQSxFQXJCQSxNQUFNLFNBQVM7QUFDYixZQUFRLElBQUksb0NBQW9DO0FBRWhELFNBQUssV0FBVztBQUFBLE1BQ2QsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxLQUFLO0FBQUEsSUFDakIsQ0FBQztBQUFBLEVBQ0g7QUFjRjtBQUVBLFNBQVMsbUJBQW1CLFVBQWtCO0FBQzVDLFFBQU0sUUFBVyxnQkFBYSxVQUFVLE1BQU0sRUFBRSxNQUFNLElBQUk7QUFDMUQsUUFBTSxlQUFlLFlBQVksS0FBSztBQUN0QyxFQUFHLGlCQUFjLFVBQVUsYUFBYSxLQUFLLElBQUksQ0FBQztBQUNsRCxVQUFRLElBQUksaUJBQWlCLFVBQVU7QUFDekM7QUFFQSxTQUFTLFlBQVksT0FBMkI7QUFDOUMsUUFBTSxlQUF5QixDQUFDO0FBQ2hDLE1BQUksSUFBSTtBQUNSLFNBQU8sSUFBSSxNQUFNLFFBQVE7QUFDdkIsVUFBTSxPQUFPLE1BQU0sQ0FBQztBQUNwQixRQUFJLEtBQUssU0FBUyxRQUFRLEtBQUssSUFBSSxJQUFJLE1BQU0sVUFBVSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLFdBQVcsR0FBRyxHQUFHO0FBQzNGLFlBQU0sa0JBQWtCLEtBQUssTUFBTSxhQUFhLEVBQUUsQ0FBQztBQUNuRCxVQUFJLFdBQVc7QUFDZixVQUFJLElBQUksSUFBSTtBQUNaLGFBQU8sSUFBSSxNQUFNLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsV0FBVyxHQUFHLEdBQUc7QUFDM0Qsb0JBQVksTUFBTSxDQUFDLElBQUk7QUFDdkI7QUFBQSxNQUNGO0FBQ0EsWUFBTSxrQkFBa0I7QUFDeEIsWUFBTSxZQUFzQixDQUFDO0FBQzdCLFVBQUk7QUFDSixhQUFRLFFBQVEsZ0JBQWdCLEtBQUssUUFBUSxHQUFJO0FBQy9DLGtCQUFVLEtBQUssTUFBTSxDQUFDLENBQUM7QUFBQSxNQUN6QjtBQUNBLFlBQU0sZ0JBQWdCLFVBQVUsT0FBTyxDQUFDLEtBQUssYUFBYSxNQUFNLGNBQWMsUUFBUSxHQUFHLENBQUM7QUFDMUYsWUFBTSxvQkFBb0IsZUFBZSxhQUFhO0FBQ3RELFlBQU0sY0FBYyxLQUFLLFFBQVEsVUFBVSxtQkFBbUIsS0FBSyxrQkFBa0IsbUJBQW1CO0FBQ3hHLG1CQUFhLEtBQUssV0FBVztBQUM3QixVQUFJLElBQUk7QUFBQSxJQUNWLE9BQU87QUFDTCxtQkFBYSxLQUFLLElBQUk7QUFBQSxJQUN4QjtBQUNBO0FBQUEsRUFDRjtBQUNBLFNBQU87QUFDVDtBQUVBLFNBQVMsY0FBYyxTQUF5QjtBQUM5QyxRQUFNLENBQUMsT0FBTyxTQUFTLE9BQU8sSUFBSSxRQUFRLE1BQU0sR0FBRyxFQUFFLElBQUksTUFBTTtBQUMvRCxRQUFNLGVBQWUsUUFBUSxPQUFPLFVBQVUsS0FBSztBQUNuRCxTQUFPO0FBQ1Q7QUFFQSxTQUFTLGVBQWUsU0FBeUI7QUFDL0MsTUFBSSxVQUFVLElBQUk7QUFDaEIsV0FBTyxLQUFLO0FBQUEsRUFDZCxXQUFXLFVBQVUsTUFBTTtBQUN6QixVQUFNLFVBQVUsS0FBSyxNQUFNLFVBQVUsRUFBRTtBQUN2QyxXQUFPLEtBQUs7QUFBQSxFQUNkLE9BQU87QUFDTCxVQUFNLFFBQVEsS0FBSyxNQUFNLFVBQVUsSUFBSTtBQUN2QyxXQUFPLElBQUk7QUFBQSxFQUNiO0FBQ0Y7IiwKICAibmFtZXMiOiBbXQp9Cg==
